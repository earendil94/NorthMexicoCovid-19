View(test_set)
# time
model_time <- stan_glm(avg_cases ~ time, family = poisson,  data=training_set)
loss(model_time, test_set)
test_days = 20
days <- as.integer(data_daily$time[length(data_daily$time)])
training_set <- data_daily[data_daily$time<days-test_days,]
test_set <- data_daily[data_daily$time>=days-test_days,]
loss <- function(model, test){
pred_model <- posterior_predict(model, newdata = test)
pred_0025 <- apply(pred_model, 2, function(x) quantile(x, 0.025))
pred_0975 <- apply(pred_model, 2, function(x) quantile(x, 0.975))
pred_model <- apply(pred_model, 2, mean)
plot(test$time, test$avg_cases, type="l")
points(test$time, pred_model, type="l", col="red")
lines(test$time, pred_0025, lty=2, col="red")
lines(test$time, pred_0975, lty=2, col="red")
return(mse(test$avg_cases, pred_model))
}
# time
model_time <- stan_glm(avg_cases ~ time, family = poisson,  data=training_set)
loss(model_time, test_set)
# time^2
model_time_2 <- stan_glm( avg_cases ~ time + I(time^2), family = poisson,  data=training_set)
loss(model_time_2, test_set)
# time^3
model_time_3 <- stan_glm(avg_cases ~ time + I(time^2) + I(time^3), family = poisson,  data=training_set)
loss(model_time_3, test_set)
predict.glm(model_time_exp, newdata = test_set)
# exp(time) !!!!!!!!!!!!!!!!!!
model_time_exp <- glm(avg_cases ~ time + I(time^2) + I(exp(time)), family = poisson,  data=training_set)
summary(model_time_exp)
model_time_exp$fitted.values
predict.glm(model_time_exp, newdata = test_set)
plot(trainig_set$time, training_set$avg_cases)
plot(training_set$time, training_set$avg_cases)
poins(test_set$time, predict(model_time_exp, newdata = test_set))
points(test_set$time, predict(model_time_exp, newdata = test_set))
plot(training_set$time, training_set$avg_cases, type="l")
points(test_set$time, predict(model_time_exp, newdata = test_set), , type="l", col="red")
View(training_set)
plot(training_set$time, model_time_exp$fitted_values, type="l")
points(test_set$time, predict(model_time_exp, newdata = test_set), , type="l", col="red")
avg_cases
plot(training_set$time, model_time_exp$avg_cases, type="l")
points(test_set$time, predict(model_time_exp, newdata = test_set), , type="l", col="red")
loss(model_time_exp, test_set)
plot(training_set$time, training_set$avg_cases, type="l")
points(test_set$time, predict(model_time_exp, newdata = test_set), , type="l", col="red")
summary(model_time_exp)
summary(model_time_2)
model_time_2$coefficients
test_days = 0
days <- as.integer(data_daily$time[length(data_daily$time)])
training_set <- data_daily[data_daily$time<days-test_days,]
test_set <- data_daily[data_daily$time>=days-test_days,]
# exp(time) !!!!!!!!!!!!!!!!!!
model_time_exp <- glm(avg_cases ~ time + I(time^2) + I(exp(time)), family = poisson,  data=training_set)
plot(training_set$time, training_set$avg_cases, type="l")
points(training_set$time, model_time_exp$fitted.values, type="l", col="red")
model_time_exp$coefficients
summary(model_time_exp)
test_days = 1
days <- as.integer(data_daily$time[length(data_daily$time)])
training_set <- data_daily[data_daily$time<days-test_days,]
test_set <- data_daily[data_daily$time>=days-test_days,]
# exp(time) !!!!!!!!!!!!!!!!!!
model_time_exp <- glm(avg_cases ~ time + I(time^2) + I(exp(time)), family = poisson,  data=training_set)
summary(model_time_exp)
model_time_exp$fitted.values
model_time_exp$coefficients
summary(model_time_exp)
predict.glm(model_time_exp, newdata = test_set)
test_days = 1
days <- as.integer(data_daily$time[length(data_daily$time)])
training_set <- data_daily[data_daily$time<=days-test_days,]
test_set <- data_daily[data_daily$time>days-test_days,]
View(test_set)
# exp(time) !!!!!!!!!!!!!!!!!!
model_time_exp <- glm(avg_cases ~ time + I(time^2) + I(exp(time)), family = poisson,  data=training_set)
model_time_exp$fitted.values
model_time_exp$coefficients
summary(model_time_exp)
predict.glm(model_time_exp, newdata = test_set)
?predict.glm
predict.glm(model_time_exp, newdata = test_set, type = "response")
mse(test_set$avg_cases, predict.glm(model_time_exp, newdata = test_set, type = "response"))
test_set$avg_cases
test_days = 5
days <- as.integer(data_daily$time[length(data_daily$time)])
training_set <- data_daily[data_daily$time<=days-test_days,]
test_set <- data_daily[data_daily$time>days-test_days,]
test_days = 20
days <- as.integer(data_daily$time[length(data_daily$time)])
training_set <- data_daily[data_daily$time<=days-test_days,]
test_set <- data_daily[data_daily$time>days-test_days,]
# exp(time) !!!!!!!!!!!!!!!!!!
model_time_exp <- glm(avg_cases ~ time + I(time^2) + I(exp(time)), family = poisson,  data=training_set)
summary(model_time_exp)
model_time_exp$fitted.values
mse(test_set$avg_cases, predict.glm(model_time_exp, newdata = test_set, type = "response"))
plot(training_set$time, training_set$avg_cases, type="l")
points(training_set$time, model_time_exp$fitted.values, type="l", col="red")
points(test_set$time, predict(model_time_exp, newdata = test_set), , type="l", col="red")
points(test_set$time, predict(model_time_exp, newdata = test_set, type="response"), , type="l", col="red")
points(test_set$time, predict(model_time_exp, newdata = test_set, type="response"), , type="l", col="red")
points(test_set$time, predict(model_time_exp, newdata = test_set, type="response"), type="l", col="red")
plot(training_set$time, training_set$avg_cases, type="l")
points(training_set$time, model_time_exp$fitted.values, type="l", col="red")
points(test_set$time, predict(model_time_exp, newdata = test_set, type="response"), type="l", col="red")
predict(model_time_exp, newdata = test_set, type="response")
model_time_exp$coefficients
test_days = 5
days <- as.integer(data_daily$time[length(data_daily$time)])
training_set <- data_daily[data_daily$time<=days-test_days,]
test_set <- data_daily[data_daily$time>days-test_days,]
# exp(time) !!!!!!!!!!!!!!!!!!
model_time_exp <- glm(avg_cases ~ time + I(time^2) + I(exp(time)), family = poisson,  data=training_set)
model_time_exp$coefficients
mse(test_set$avg_cases, predict.glm(model_time_exp, newdata = test_set, type = "response"))
plot(training_set$time, training_set$avg_cases, type="l")
points(training_set$time, model_time_exp$fitted.values, type="l", col="red")
points(test_set$time, predict(model_time_exp, newdata = test_set, type="response"), type="l", col="red")
# time^2
model_time_2 <- stan_glm( avg_cases ~ time + I(time^2), family = poisson,  data=training_set)
loss(model_time_2, test_set)
# lockdown
model_time_lock <- stan_glm(avg_cases ~ time +  I(time^2) + post_lockdown + lockdown, family = poisson,  data=training_set)
loss(model_time_lock, test_set)
# exp(time) !!!!!!!!!!!!!!!!!!
?stan_glm
model_time_exp <- stan_glm(avg_cases ~ time + I(time^2) + I(exp(time)), family = poisson,  data=training_set, prior = normal(0,10^-4))
model_time_exp <- stan_glm(avg_cases ~ time + I(time^2) + I(exp(time)), family = poisson,  data=training_set, prior = normal(0,10^-80))
glm(avg_cases ~ time, family = beta, data = training_set)
?glm
glm(avg_cases ~ time, family = Gamma, data = training_set)
model_gam <- gam(avg_cases ~ s(time), family = poisson, data = training_set)
install.packages("gam")
library(gam)
model_gam <- gam(avg_cases ~ s(time), family = poisson, data = training_set)
model_gam$fitted.values
predict.Gam(model_gam, newdata = test_set, type = "Response")
predict.Gam(model_gam, newdata = test_set, type = "response")
pred <- predict.Gam(model_gam, newdata = test_set, type = "response")
plot(data_daily$time, training_set$avg_cases)
plot(data_daily$time, data_daily$avg_cases)
points(test_set$time, pred)
plot(data_daily$time, data_daily$avg_cases, type= "l")
points(test_set$time, pred, type = "l", col = "red")
model_gam <- gam(avg_cases ~ s(time, k= 4), family = poisson, data = training_set)
model_gam <- gam(avg_cases ~ s(time, k=4), family = poisson, data = training_set)
model_gam <- gam(avg_cases ~ s(time^3, k=3), family = poisson, data = training_set)
model_gam <- gam(avg_cases ~ s(time, k=12), family = poisson, data = training_set)
model_gam <- gam(avg_cases ~ s(time, k=12, bs="cr"), family = poisson, data = training_set)
model_gam <- gam(avg_cases ~ s(time, bs="cr"), family = poisson, data = training_set)
model_gam <- gam(avg_cases ~ s(time), k=4, family = poisson, data = training_set)
pred <- predict.Gam(model_gam, newdata = test_set, type = "response")
plot(data_daily$time, data_daily$avg_cases, type= "l")
points(test_set$time, pred, type = "l", col = "red")
model_gam <- gam(avg_cases ~ s(time), family = poisson, data = training_set, method="REML")
install.packages("earth")
mars <- earth(avg_cases ~ time, data = data_daily, nk=1)
library(earth)
mars <- earth(avg_cases ~ time, data = data_daily, nk=1)
plotmo(mars)
points(data_daily)
points(data_daily, type = "l")
points(data_daily$avg_cases, type = "l")
plotmo(mars)
points(data_daily$avg_cases, type = "l")
mars <- earth(avg_cases ~ time, data = data_daily, nk=3)
plotmo(mars)
points(data_daily$avg_cases, type = "l")
pred <- predict(mars, newdata = test_set, type = "response")
plot(data_daily$time, data_daily$avg_cases, type= "l")
points(test_set$time, pred, type = "l", col = "red")
pred <- predict(mars, newdata = test_set, type = "response")
points(test_set$time, pred, type = "l", col = "red")
mars <- earth(avg_cases ~ time, data = training_set, nk=3)
pred <- predict(mars, newdata = test_set, type = "response")
plot(data_daily$time, data_daily$avg_cases, type= "l")
points(test_set$time, pred, type = "l", col = "red")
mars <- earth(avg_cases ~ time, data = training_set, nk=20)
pred <- predict(mars, newdata = test_set, type = "response")
plot(data_daily$time, data_daily$avg_cases, type= "l")
points(test_set$time, pred, type = "l", col = "red")
mars <- earth(avg_cases ~ time, data = data_daily, nk=5)
pred <- predict(mars, type = "response")
plot(data_daily$time, data_daily$avg_cases, type= "l")
points(test_set$time, pred, type = "l", col = "red")
points(data_daily$time, pred, type = "l", col = "red")
mars <- earth(avg_cases ~ time, data = data_daily, nk=20)
pred <- predict(mars, type = "response")
plot(data_daily$time, data_daily$avg_cases, type= "l")
points(data_daily$time, pred, type = "l", col = "red")
mars <- earth(avg_cases ~ time^2, data = data_daily, nk=1)
pred <- predict(mars, type = "response")
plot(data_daily$time, data_daily$avg_cases, type= "l")
points(data_daily$time, pred, type = "l", col = "red")
mars <- earth(avg_cases ~ time^2, data = data_daily, nk=2)
pred <- predict(mars, type = "response")
plot(data_daily$time, data_daily$avg_cases, type= "l")
points(data_daily$time, pred, type = "l", col = "red")
mars <- earth(avg_cases ~ time^2, data = data_daily, nk=3)
pred <- predict(mars, type = "response")
plot(data_daily$time, data_daily$avg_cases, type= "l")
points(data_daily$time, pred, type = "l", col = "red")
mars <- earth(avg_cases ~ time^2, data = data_daily, nk=5)
pred <- predict(mars, type = "response")
plot(data_daily$time, data_daily$avg_cases, type= "l")
points(data_daily$time, pred, type = "l", col = "red")
mars <- earth(avg_cases ~ time^2, data = data_daily, nk=20)
pred <- predict(mars, type = "response")
plot(data_daily$time, data_daily$avg_cases, type= "l")
points(data_daily$time, pred, type = "l", col = "red")
#boh boh
model_gam <- gam(avg_cases ~ s(time), family = poisson, data = data_daily)
pred <- predict.Gam(model_gam, type = "response")
plot(data_daily$time, data_daily$avg_cases, type= "l")
points(data_daily$time, pred, type = "l", col = "red")
mars <- earth(avg_cases ~ time, data = data_daily, nk=20)
pred <- predict(mars, type = "response")
plot(data_daily$time, data_daily$avg_cases, type= "l")
points(data_daily$time, pred, type = "l", col = "red")
test_days = 3
days <- as.integer(data_daily$time[length(data_daily$time)])
training_set <- data_daily[data_daily$time<=days-test_days,]
test_set <- data_daily[data_daily$time>days-test_days,]
#boh boh
model_gam <- gam(avg_cases ~ s(time), family = poisson, data = training_set)
pred <- predict.Gam(model_gam, newdata = test_set, type = "response")
plot(data_daily$time[180:200], data_daily$avg_cases[180:200], type= "l")
points(test_set$time, pred, type = "l", col = "red")
View(data_daily)
mars <- earth(avg_cases ~ time, data = training_set, nk=20)
pred <- predict(mars, newdata = test_set, type = "response")
plot(data_daily$time[180:200], data_daily$avg_cases[180:200], type= "l")
points(test_set$time, pred, type = "l", col = "red")
mse(test_set$avg_cases, pred)
test_days = 10
days <- as.integer(data_daily$time[length(data_daily$time)])
training_set <- data_daily[data_daily$time<=days-test_days,]
test_set <- data_daily[data_daily$time>days-test_days,]
mars <- earth(avg_cases ~ time, data = training_set, nk=20)
pred <- predict(mars, newdata = test_set, type = "response")
plot(data_daily$time[180:200], data_daily$avg_cases[180:200], type= "l")
points(test_set$time, pred, type = "l", col = "red")
mse(test_set$avg_cases, pred)
test_days = 5
days <- as.integer(data_daily$time[length(data_daily$time)])
training_set <- data_daily[data_daily$time<=days-test_days,]
test_set <- data_daily[data_daily$time>days-test_days,]
mars <- earth(avg_cases ~ time, data = training_set, nk=20)
pred <- predict(mars, newdata = test_set, type = "response")
plot(data_daily$time[180:200], data_daily$avg_cases[180:200], type= "l")
points(test_set$time, pred, type = "l", col = "red")
mse(test_set$avg_cases, pred)
#boh boh
model_gam <- gam(avg_cases ~ s(time), family = gamma, data = training_set)
?gamma
#boh boh
model_gam <- gam(avg_cases ~ s(time), family = Gamma, data = training_set)
pred <- predict.Gam(model_gam, newdata = test_set, type = "response")
plot(data_daily$time[180:200], data_daily$avg_cases[180:200], type= "l")
points(test_set$time, pred, type = "l", col = "red")
View(data_daily)
lag1 <- c(data_daily$avg_cases[2:200], NA)
lag1
data_daily$lag1 <- lag1
View(data_daily)
lag2 <- c(data_daily$avg_cases[3:200], NA, NA)
data_daily$lag2 <- lag2
View(data_daily)
test_days = 2
days <- as.integer(data_daily$time[length(data_daily$time)])
training_set <- data_daily[data_daily$time<=days-test_days,]
test_set <- data_daily[data_daily$time>days-test_days,]
# time^2
model_time_2 <- stan_glm( avg_cases ~ time + I(time^2) + lag1 + lag2, family = poisson,  data=training_set)
loss(model_time_2, test_set)
model_time_2$coefficients
View(data_daily)
#Daily data
data_daily <- data %>%
group_by(time) %>%
summarize(daily_cases = n())
lag1 <- c(NA, data_daily$avg_cases[1:199])
lag2 <- c(NA, NA, data_daily$avg_cases[1:198])
data_daily$lag1 <- lag1
data_daily$lag2 <- lag2
##### CSV loading #####
data <- read.csv("MexicoCovid19Updated.csv", header = T, sep = ",")
data$Date <- as.Date(data$Date,"%Y-%m-%d")
#A random 120 year old person appears, gratz mate!
max(data$Age)
for (i in names){
data$population[data$Region==i] <- population[population$Estado==i,2]
}
##### Preliminary plotting #####
# hist sex
plot(data$Sex)
#hist age 0-20 20-30 30-40 40-50 50-60 60-70 70-80 80+
data$age_class <- factor(data$Age%/%10)
plot(data$age_class)
#cumulative
data$time <- data$Date-data$Date[1]
plot(data$time,rownames(data),type="l")
# by regions
plot(data$Region)
#Daily data
data_daily <- data %>%
group_by(time) %>%
summarize(daily_cases = n())
##### Adding lockdown and post_lockdown columns #####
first_day_data <- min(data$Date)
lockdown_start <- as.Date("2020-03-23")
last_day_data <- max(data$Date)
lockdown_end <- as.Date("2020-06-01")
no_lock <- rep(0,as.integer(lockdown_start - first_day_data))
yes_lock <- seq(1,as.integer(lockdown_end - lockdown_start))
no_lock_again <- rep(0,as.integer(last_day_data - lockdown_end)+1)
lockdown <- c(no_lock, yes_lock, no_lock_again)
data_daily$lockdown <- lockdown
no_lock <- rep(0,as.integer(lockdown_end - first_day_data))
post_lock <- seq(1,as.integer(last_day_data - lockdown_end)+1)
post_lockdown <- c(no_lock, post_lock)
data_daily$post_lockdown <- post_lockdown
#Daily data show a strong periodicity due to (possibly) sunday testing?
plot(data_daily$time, data_daily$daily_cases, type = "l")
#Moving averages make them smooth
#View(data_daily)
data_daily$avg_cases <- movavg(data_daily$daily_cases, n= 7, type="s")
data_daily$avg_cases <- as.integer(data_daily$avg_cases)
data_daily$time <- as.integer(data_daily$time)
plot(data_daily$time, data_daily$avg_cases, type = "l")
lag1 <- c(NA, data_daily$avg_cases[1:199])
lag2 <- c(NA, NA, data_daily$avg_cases[1:198])
data_daily$lag1 <- lag1
data_daily$lag2 <- lag2
View(data_daily)
test_days = 5
days <- as.integer(data_daily$time[length(data_daily$time)])
training_set <- data_daily[data_daily$time<=days-test_days,]
test_set <- data_daily[data_daily$time>days-test_days,]
training_set <- training_set[3:200,]
training_set <- data_daily[data_daily$time<=days-test_days,]
test_set <- data_daily[data_daily$time>days-test_days,]
training_set <- training_set[3:,]
training_set <- training_set[3:lenght(training_set),]
training_set <- training_set[3:length(training_set),]
days <- as.integer(data_daily$time[length(data_daily$time)])
training_set <- data_daily[data_daily$time<=days-test_days,]
test_set <- data_daily[data_daily$time>days-test_days,]
training_set <- training_set[3:length(training_set),]
length(training_set)
dim(training_set)
training_set <- data_daily[data_daily$time<=days-test_days,]
dim(training_set)
days <- as.integer(data_daily$time[length(data_daily$time)])
training_set <- data_daily[data_daily$time<=days-test_days,]
test_set <- data_daily[data_daily$time>days-test_days,]
training_set <- training_set[3:dim(training_set)[1],]
dim(training_set)
loss <- function(model, test){
pred_model <- posterior_predict(model, newdata = test)
pred_0025 <- apply(pred_model, 2, function(x) quantile(x, 0.025))
pred_0975 <- apply(pred_model, 2, function(x) quantile(x, 0.975))
pred_model <- apply(pred_model, 2, mean)
plot(test$time, test$avg_cases, type="l")
points(test$time, pred_model, type="l", col="red")
lines(test$time, pred_0025, lty=2, col="red")
lines(test$time, pred_0975, lty=2, col="red")
return(mse(test$avg_cases, pred_model))
}
# time^2
model_time_2 <- stan_glm( avg_cases ~ time + I(time^2) + lag1 + lag2, family = poisson,  data=training_set)
loss(model_time_2, test_set)
# time^2
model_time_2 <- stan_glm( avg_cases ~ time + I(time^2) + lag2, family = poisson,  data=training_set)
loss(model_time_2, test_set)
#boh boh
model_gam <- gam(avg_cases ~ s(time)+ s(lag2), family = poisson(), data = training_set)
pred <- predict.Gam(model_gam, newdata = test_set, type = "response")
plot(data_daily$time[180:200], data_daily$avg_cases[180:200], type= "l")
points(test_set$time, pred, type = "l", col = "red")
mars <- earth(avg_cases ~ time + lag2, data = training_set, nk=20)
pred <- predict(mars, newdata = test_set, type = "response")
plot(data_daily$time[180:200], data_daily$avg_cases[180:200], type= "l")
points(test_set$time, pred, type = "l", col = "red")
mse(test_set$avg_cases, pred)
mars <- earth(avg_cases ~ time + lag1 + lag2, data = training_set, nk=20)
pred <- predict(mars, newdata = test_set, type = "response")
plot(data_daily$time[180:200], data_daily$avg_cases[180:200], type= "l")
points(test_set$time, pred, type = "l", col = "red")
mse(test_set$avg_cases, pred)
mars <- earth(avg_cases ~ time + lag2, data = training_set, nk=20)
#boh boh
model_gam <- gam(avg_cases ~ s(time) + s(lag1) + s(lag2), family = poisson(), data = training_set)
pred <- predict.Gam(model_gam, newdata = test_set, type = "response")
plot(data_daily$time[180:200], data_daily$avg_cases[180:200], type= "l")
points(test_set$time, pred, type = "l", col = "red")
install.packages("mgcv")
library(mgcv)
#boh boh
model_gam <- gam(avg_cases ~ s(time) + s(lag1) + s(lag2), method="REML", family = poisson(), data = training_set)
pred <- predict.Gam(model_gam, newdata = test_set, type = "response")
pred <- predict(model_gam, newdata = test_set, type = "response")
plot(data_daily$time[180:200], data_daily$avg_cases[180:200], type= "l")
points(test_set$time, pred, type = "l", col = "red")
#boh boh
model_gam <- gam(avg_cases ~ s(time) + s(lag2), method="REML", family = poisson(), data = training_set)
pred <- predict(model_gam, newdata = test_set, type = "response")
plot(data_daily$time[180:200], data_daily$avg_cases[180:200], type= "l")
points(test_set$time, pred, type = "l", col = "red")
#boh boh
model_gam <- gam(avg_cases ~ s(time), method="REML", family = poisson(), data = training_set)
pred <- predict(model_gam, newdata = test_set, type = "response")
plot(data_daily$time[180:200], data_daily$avg_cases[180:200], type= "l")
points(test_set$time, pred, type = "l", col = "red")
pred <- predict(model_gam, newdata = test_set, type = "response")
plot(data_daily$time[180:200], data_daily$avg_cases[180:200], type= "l")
#boh boh
model_gam <- gam(avg_cases ~ s(time) + s(lag2), method="REML", family = poisson(), data = training_set)
pred <- predict(model_gam, newdata = test_set, type = "response")
plot(data_daily$time[180:200], data_daily$avg_cases[180:200], type= "l")
points(test_set$time, pred, type = "l", col = "red")
summary(model_gam)
gam.check(model_gam)
#boh boh
model_gam <- gam(avg_cases ~ time + s(time) + s(lag2), method="REML", family = poisson(), data = training_set)
pred <- predict(model_gam, newdata = test_set, type = "response")
plot(data_daily$time[180:200], data_daily$avg_cases[180:200], type= "l")
points(test_set$time, pred, type = "l", col = "red")
summary(model_gam)
#boh boh
model_gam <- gam(avg_cases ~   s(time) + s(lag2), method="REML", family = poisson(), data = training_set)
pred <- predict(model_gam, newdata = test_set, type = "response")
plot(data_daily$time[180:200], data_daily$avg_cases[180:200], type= "l")
points(test_set$time, pred, type = "l", col = "red")
summary(model_gam)
#boh boh
model_gam <- gam(avg_cases ~ 1 + time +  s(time) + s(lag2), method="REML", family = poisson(), data = training_set)
pred <- predict(model_gam, newdata = test_set, type = "response")
plot(data_daily$time[180:200], data_daily$avg_cases[180:200], type= "l")
points(test_set$time, pred, type = "l", col = "red")
summary(model_gam)
##### MARS
mars <- earth(avg_cases ~ time + lag2, data = training_set, nk=5)
pred <- predict(mars, newdata = test_set, type = "response")
plot(data_daily$time[180:200], data_daily$avg_cases[180:200], type= "l")
points(test_set$time, pred, type = "l", col = "red")
mse(test_set$avg_cases, pred)
#boh boh
model_gam <- gam(avg_cases ~ time +  s(time) + s(lag2), method="REML", family = poisson(), data = training_set)
pred <- predict(model_gam, newdata = test_set, type = "response")
plot(data_daily$time[180:200], data_daily$avg_cases[180:200], type= "l")
points(test_set$time, pred, type = "l", col = "red")
summary(model_gam)
gam.check(model_gam)
mse(test_set$avg_cases, pred)
#boh boh
model_gam <- gam(avg_cases ~s(time) + s(lag2), method="REML", family = poisson(), data = training_set)
pred <- predict(model_gam, newdata = test_set, type = "response")
plot(data_daily$time[180:200], data_daily$avg_cases[180:200], type= "l")
points(test_set$time, pred, type = "l", col = "red")
summary(model_gam)
gam.check(model_gam)
mse(test_set$avg_cases, pred)
#boh boh
model_gam <- gam(avg_cases ~ lag2 + s(time), method="REML", family = poisson(), data = training_set)
pred <- predict(model_gam, newdata = test_set, type = "response")
plot(data_daily$time[180:200], data_daily$avg_cases[180:200], type= "l")
points(test_set$time, pred, type = "l", col = "red")
summary(model_gam)
gam.check(model_gam)
mse(test_set$avg_cases, pred)
plot(data_daily$time[180:200], data_daily$avg_cases[180:200], type= "l")
points(test_set$time, pred, type = "l", col = "red")
#boh boh
model_gam <- gam(avg_cases ~ lag1 + lag2 + s(time), method="REML", family = poisson(), data = training_set)
pred <- predict(model_gam, newdata = test_set, type = "response")
plot(data_daily$time[180:200], data_daily$avg_cases[180:200], type= "l")
points(test_set$time, pred, type = "l", col = "red")
mse(test_set$avg_cases, pred)
test_days = 10
days <- as.integer(data_daily$time[length(data_daily$time)])
training_set <- data_daily[data_daily$time<=days-test_days,]
test_set <- data_daily[data_daily$time>days-test_days,]
training_set <- training_set[3:dim(training_set)[1],]
#boh boh
model_gam <- gam(avg_cases ~  lag2 + s(time), method="REML", family = poisson(), data = training_set)
pred <- predict(model_gam, newdata = test_set, type = "response")
plot(data_daily$time[180:200], data_daily$avg_cases[180:200], type= "l")
points(test_set$time, pred, type = "l", col = "red")
mse(test_set$avg_cases, pred)
##### MARS
mars <- earth(avg_cases ~ time + lag2, data = training_set, nk=5)
pred <- predict(mars, newdata = test_set, type = "response")
plot(data_daily$time[180:200], data_daily$avg_cases[180:200], type= "l")
points(test_set$time, pred, type = "l", col = "red")
mse(test_set$avg_cases, pred)
# time^2
model_time_2 <- stan_glm( avg_cases ~ time + I(time^2) + lag2, family = poisson,  data=training_set)
loss(model_time_2, test_set)
summary(model_time_2)
model_time_2$coefficients
# time^3
model_time_3 <- stan_glm(avg_cases ~ time + I(time^2) + I(time^3), family = poisson,  data=training_set)
loss(model_time_3, test_set)
# time^3
model_time_3 <- stan_glm(avg_cases ~ time + I(time^2) + I(time^3) + lag2, family = poisson,  data=training_set)
loss(model_time_3, test_set)
