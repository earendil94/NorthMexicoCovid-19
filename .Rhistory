}
pred_model <- posterior_predict(model, newdata = df[i,])
pred_mean <- apply(pred_model, 2, mean)
pred_0025 <- apply(pred_model, 2, function(x) quantile(x, 0.025))
pred_0975 <- apply(pred_model, 2, function(x) quantile(x, 0.975))
pred <- c(pred, pred_mean)
pred_low <- c(pred_low, pred_0025)
pred_high <- c(pred_high, pred_0975)
print(paste("Real cases", as.double(df[i,"avg_cases"])))
print(paste("Predicted", pred_mean))
ms <- ms + mse(as.double(df[i,"avg_cases"]), pred_mean)
df[i, "avg_cases"] <- pred_mean
}
plot(test$time, test$avg_cases, type="l")
points(test$time, pred, type="l", col="red")
lines(test$time, pred_low, lty=2, col="red")
lines(test$time, pred_high, lty=2, col="red")
return(ms/length(pred))
}
loss_stan(model_time_2, test_set) #33000
loss_stan_lag(model_time_2, test_set)
?predict
loss_lag <- function(model, test){
df <- test
pred_model <- predict(model, newdata = df[1,], type="response")
ms <- mse(as.double(df[1,"avg_cases"]), pred_mean)
pred <- pred_model
df[1, "avg_cases"] <- pred_model
#If we are just predicting one day then we are done
if (dim(df)[1] == 1){
return(ms)
}
#Yes, I know having not one but two nested loops is bad in R
#But look, there will not be that many iterations, we are dealing
#With short predictions here
for (i in 2:dim(df)[1]){
df[i, "lag1"] <- df[i-1, "avg_cases"]
#Need to update each lag column
for (k in 2:i){
col <- paste("lag",k,sep="")
col_prev <- paste("lag",k-1, sep="")
df[i, col] <- df[i-1, col_prev]
}
pred_model <- predict(model, newdata = df[1,], type="response")
pred <- c(pred, pred_model)
ms <- ms + mse(as.double(df[i,"avg_cases"]), pred_mean)
df[i, "avg_cases"] <- pred_mean
}
plot(test$time, test$avg_cases, type="l")
points(test$time, pred, type="l", col="red")
return(ms/length(pred))
}
#boh boh
model_gam <- gam(avg_cases ~  lag2 + s(time), method="REML", family = poisson(), data = training_set)
loss(model_gam, test_set)
pred <- predict(model_gam, newdata = test_set, type = "response")
plot(test_set$time, test_set$avg_cases, type= "l")
points(test_set$time, pred, type = "l", col = "red")
summary(model_gam)
loss(model_gam, test_set)
mse(test_set$avg_cases, pred) #19207
loss_lag(model_gam, test_set)
loss_lag <- function(model, test){
df <- test
pred_model <- predict(model, newdata = df[1,], type="response")
ms <- mse(as.double(df[1,"avg_cases"]), pred_model)
pred <- pred_model
df[1, "avg_cases"] <- pred_model
#If we are just predicting one day then we are done
if (dim(df)[1] == 1){
return(ms)
}
#Yes, I know having not one but two nested loops is bad in R
#But look, there will not be that many iterations, we are dealing
#With short predictions here
for (i in 2:dim(df)[1]){
df[i, "lag1"] <- df[i-1, "avg_cases"]
#Need to update each lag column
for (k in 2:i){
col <- paste("lag",k,sep="")
col_prev <- paste("lag",k-1, sep="")
df[i, col] <- df[i-1, col_prev]
}
pred_model <- predict(model, newdata = df[1,], type="response")
pred <- c(pred, pred_model)
ms <- ms + mse(as.double(df[i,"avg_cases"]), pred_model)
df[i, "avg_cases"] <- pred_mean
}
plot(test$time, test$avg_cases, type="l")
points(test$time, pred, type="l", col="red")
return(ms/length(pred))
}
loss_lag(model_gam, test_set)
loss_lag <- function(model, test){
df <- test
pred_model <- predict(model, newdata = df[1,], type="response")
ms <- mse(as.double(df[1,"avg_cases"]), pred_model)
pred <- pred_model
df[1, "avg_cases"] <- pred_model
#If we are just predicting one day then we are done
if (dim(df)[1] == 1){
return(ms)
}
#Yes, I know having not one but two nested loops is bad in R
#But look, there will not be that many iterations, we are dealing
#With short predictions here
for (i in 2:dim(df)[1]){
df[i, "lag1"] <- df[i-1, "avg_cases"]
#Need to update each lag column
for (k in 2:i){
col <- paste("lag",k,sep="")
col_prev <- paste("lag",k-1, sep="")
df[i, col] <- df[i-1, col_prev]
}
pred_model <- predict(model, newdata = df[1,], type="response")
pred <- c(pred, pred_model)
ms <- ms + mse(as.double(df[i,"avg_cases"]), pred_model)
df[i, "avg_cases"] <- pred_model
}
plot(test$time, test$avg_cases, type="l")
points(test$time, pred, type="l", col="red")
return(ms/length(pred))
}
loss_lag(model_gam, test_set)
#boh boh
model_gam <- gam(avg_cases ~  lag2 + s(time), method="REML", family = poisson(), data = training_set)
loss(model_gam, test_set)
loss_lag(model_gam, test_set)
summary(model_gam)
##### MARS
training_set_3 <- training_set[3:dim(training_set)[1],]
mars <- earth(avg_cases ~ time + lag2, data = training_set_3, nk=5)
pred <- predict(mars, newdata = test_set, type = "response")
plot(data_daily$time[180:200], data_daily$avg_cases[180:200], type= "l")
points(test_set$time, pred, type = "l", col = "red")
mse(test_set$avg_cases, pred) #54347
loss_lag(mars, test_set)
##### LOGISTIC OR GOMPERTZ ON CUMULATIVE DATA  #####
plot(data_daily$cumulative,type="l")
# fit a logistic function using non linear least squares approximation
logistic_model <- nls(cumulative ~ SSlogis(time, Asym, xmid, scal), data=training_set)
coeff <- coef(logistic_model)
x <- 1:400
plot(x,SSlogis(x,coeff[1],coeff[2],coeff[3]),type="l")
points(data_daily$time, data_daily$cumulative, col=3, pch=1)
points(test_set$time,test_set$cumulative,col=2,pch=20)
plot(test_set$time, test_set$cumulative, type= "l")
plot(data_daily$time, data_daily$cumulative, col=1, pch=1)
plot(data_daily$time, data_daily$cumulative, col=1, pch=1)
points(test_set$time, SSlogis(test_set$time,coeff[1],coeff[2],coeff[3]), type = "l", col = "red")
plot(data_daily$time, data_daily$cumulative, col=1, pch=1)
plot(test_set$time, test_set$cumulative, type= "l")
plot(data_daily$time, data_daily$cumulative, col=1, pch=1)
plot(data_daily$time, data_daily$cumulative, col=1, pch=1)
points(test_set$time, SSlogis(test_set$time,coeff[1],coeff[2],coeff[3]), type = "l", col = "red")
plot(data_daily$time, data_daily$cumulative, col=1, pch=1)
mse(test_set$cumulative,SSlogis(test_set$time,coeff[1],coeff[2],coeff[3]))
test_set$cumulative
SSlogis(test_set$time,coeff[1],coeff[2],coeff[3])
# but I want cases to decrease slower
gomp <- function(data,alpha,beta,k){
return(alpha*exp(-beta*exp(-k*data)))
}
plot(x,gomp(x,300000,188,0.03),type="l")
points(data_daily$time,data_daily$cumulative,col=2,pch=20)
gomp_model <- nls(cumulative ~ SSgompertz(time,alpha, beta, k), data=training_set)
coeff <- coef(gomp_model)
coeff
plot(x,SSgompertz(x,coeff[1],coeff[2],coeff[3]),type="l")
points(data_daily$time,data_daily$cumulative,col=2,pch=20)
plot(test_set$time, test_set$cumulative, type= "l")
points(SSgompertz(test_set$time,coeff[1],coeff[2],coeff[3]), type = "l", col = "red")
mse(test_set$cumulative,SSgompertz(test_set$time,coeff[1],coeff[2],coeff[3]))
plot(test_set$time, test_set$cumulative, type= "l")
points(test_set$time,SSgompertz(test_set$time,coeff[1],coeff[2],coeff[3]), type = "l", col = "red")
mse(test_set$cumulative,SSgompertz(test_set$time,coeff[1],coeff[2],coeff[3]))
#boh boh
model_gam_cumul <- gam(avg_cases ~  lag2 + s(time), method="REML", family = poisson(), data = training_set)
pred <- predict(model_gam, newdata = test_set, type = "response")
plot(test_set$time, test_set$avg_cases, type= "l")
points(test_set$time, pred, type = "l", col = "red")
summary(model_gam)
mse(test_set$avg_cases, pred)
#boh boh
model_gam_cumul <- gam(cumulative ~   s(time), method="REML", family = poisson(), data = training_set)
pred <- predict(model_gam, newdata = test_set, type = "response")
plot(test_set$time, test_set$avg_cases, type= "l")
plot(test_set$time, test_set$cumulative, type= "l")
points(test_set$time, pred, type = "l", col = "red")
summary(model_gam)
mse(test_set$avg_cases, pred)
#boh boh
model_gam_cumul <- gam(cumulative ~   s(time), method="REML", family = poisson(), data = training_set)
pred <- predict(model_gam_cumul, newdata = test_set, type = "response")
plot(test_set$time, test_set$cumulative, type= "l")
points(test_set$time, pred, type = "l", col = "red")
summary(model_gam)
mse(test_set$cumulative, pred)
# fit a logistic function using non linear least squares approximation
logistic_model <- nls(cumulative ~ SSlogis(time, Asym, xmid, scal), data=training_set)
coeff <- coef(logistic_model)
x <- 1:400
plot(x,SSlogis(x,coeff[1],coeff[2],coeff[3]),type="l")
points(data_daily$time, data_daily$cumulative, col=3, pch=1)
points(test_set$time,test_set$cumulative,col=2,pch=20)
#Here you can see that they seem close but they actually aren't that much.
test_set$cumulative
SSlogis(test_set$time,coeff[1],coeff[2],coeff[3])
?SSlogis
plot(x,SSlogis(x,coeff[1],coeff[2],coeff[3]),type="l")
points(data_daily$time, data_daily$cumulative, col=3, pch=1)
# De-cum NSFW
for (k in 5:1){
print(k)
}
# De-cum NSFW
for (k in length(test_set$time):1){
day_5[k] <- day_5_pred[k] - day_5_pred[k-1]
}
day_5_pred <- SSlogis(test_set$time,coeff[1],coeff[2],coeff[3])
# De-cum NSFW
for (k in length(test_set$time):1){
day_5[k] <- day_5_pred[k] - day_5_pred[k-1]
}
# De-cum NSFW
for (k in length(test_set$time):1){
day_5_pred[k] <- day_5_pred[k] - day_5_pred[k-1]
}
?cumsum
??cumsum
# De-cum NSFW
for (k in length(test_set$time):2){
day_5_pred[k] <- day_5_pred[k] - day_5_pred[k-1]
}
day_5_pred
day_5_pred <- SSlogis(test_set$time,coeff[1],coeff[2],coeff[3])
# De-cum NSFW
for (k in length(test_set$time):2){
day_5_pred[k] <- day_5_pred[k] - day_5_pred[k-1]
}
day_5_pred
data_daily$cumulative[length(data_daily$cumulative)]
day_5_pred[1] <- day_5_pred[1] - data_daily$cumulative[length(data_daily$cumulative)]
day_5_pred
day_5_pred <- SSlogis(test_set$time,coeff[1],coeff[2],coeff[3])
# De-cum NSFW
for (k in length(test_set$time):2){
day_5_pred[k] <- day_5_pred[k] - day_5_pred[k-1]
}
last_training_day <- max(training_set$time)
day_5_pred[1] <- day_5_pred[1] - SSlogis(last_training_day,coeff[1],coeff[2],coeff[3])
day_5_pred
test_set$avg_cases
#This allows us to make a comparison with the daily models
mse(day_5_pred, test_set$avg_cases)
#Desumming
desum <- function(model, coeffs, test, training){
day_test_pred <- model(test$time, coeffs[1], coeffs[2], coeffs[3])
for (k in length(test$time):2){
day_test_pred[k] <- day_test_pred[k] - day_test_pred[k-1]
}
last_training_day <- max(training$time)
day_test_pred[1] <- day_test_pred[1] - model(last_training_day,coeff[1],coeff[2],coeff[3])
return(mse(day_test_pred, test$avg_cases))
}
desum(SSlogis, coeff, test_set, training_set)
desum(SSgompertz, coeff, test_set, training_set)
# but I want cases to decrease slower
gomp <- function(data,alpha,beta,k){
return(alpha*exp(-beta*exp(-k*data)))
}
plot(x,gomp(x,300000,188,0.03),type="l")
points(data_daily$time,data_daily$cumulative,col=2,pch=20)
gomp_model <- nls(cumulative ~ SSgompertz(time,alpha, beta, k), data=training_set)
coeff <- coef(gomp_model)
coeff
plot(x,SSgompertz(x,coeff[1],coeff[2],coeff[3]),type="l")
points(data_daily$time,data_daily$cumulative,col=2,pch=20)
plot(test_set$time, test_set$cumulative, type= "l")
points(test_set$time,SSgompertz(test_set$time,coeff[1],coeff[2],coeff[3]), type = "l", col = "red")
mse(test_set$cumulative,SSgompertz(test_set$time,coeff[1],coeff[2],coeff[3]))
gomp_model <- nls(cumulative ~ SSgompertz(time,alpha, beta, k), data=training_set)
coeff <- coef(gomp_model)
coeff
plot(x,SSgompertz(x,coeff[1],coeff[2],coeff[3]),type="l")
points(data_daily$time,data_daily$cumulative,col=2,pch=20)
plot(test_set$time, test_set$cumulative, type= "l")
points(test_set$time,SSgompertz(test_set$time,coeff[1],coeff[2],coeff[3]), type = "l", col = "red")
mse(test_set$cumulative,SSgompertz(test_set$time,coeff[1],coeff[2],coeff[3]))
desum(SSgompertz, coeff, test_set, training_set)
# fit a logistic function using non linear least squares approximation
logistic_model <- nls(cumulative ~ SSlogis(time, Asym, xmid, scal), data=training_set)
coeff <- coef(logistic_model)
x <- 1:400
plot(x,SSlogis(x,coeff[1],coeff[2],coeff[3]),type="l")
points(data_daily$time, data_daily$cumulative, col=3, pch=1)
points(test_set$time,test_set$cumulative,col=2,pch=20)
#Desumming
desum <- function(model, coeffs, test, training){
day_test_pred <- model(test$time, coeffs[1], coeffs[2], coeffs[3])
for (k in length(test$time):2){
day_test_pred[k] <- day_test_pred[k] - day_test_pred[k-1]
}
last_training_day <- max(training$time)
day_test_pred[1] <- day_test_pred[1] - model(last_training_day,coeff[1],coeff[2],coeff[3])
return(mse(day_test_pred, test$avg_cases))
}
desum(SSlogis, coeff, test_set, training_set)
gomp_model <- nls(cumulative ~ SSgompertz(time,alpha, beta, k), data=training_set)
coeff <- coef(gomp_model)
coeff
plot(x,SSgompertz(x,coeff[1],coeff[2],coeff[3]),type="l")
points(data_daily$time,data_daily$cumulative,col=2,pch=20)
plot(test_set$time, test_set$cumulative, type= "l")
points(test_set$time,SSgompertz(test_set$time,coeff[1],coeff[2],coeff[3]), type = "l", col = "red")
mse(test_set$cumulative,SSgompertz(test_set$time,coeff[1],coeff[2],coeff[3]))
desum(SSgompertz, coeff, test_set, training_set)
#Desumming
desum <- function(model, coeffs, test, training){
day_test_pred <- model(test$time, coeffs[1], coeffs[2], coeffs[3])
for (k in length(test$time):2){
day_test_pred[k] <- day_test_pred[k] - day_test_pred[k-1]
}
last_training_day <- max(training$time)
day_test_pred[1] <- day_test_pred[1] - model(last_training_day,coeff[1],coeff[2],coeff[3])
print(day_test_pred)
print(test$avg_cases)
return(mse(day_test_pred, test$avg_cases))
}
desum(SSgompertz, coeff, test_set, training_set) #457k
model_gam_cumul$coefficients
gomp_model$m
#boh boh
model_gam_cumul <- gam(cumulative ~   s(time), method="REML", family = poisson(), data = training_set)
pred <- predict(model_gam_cumul, newdata = test_set, type = "response")
plot(test_set$time, test_set$cumulative, type= "l")
points(test_set$time, pred, type = "l", col = "red")
summary(model_gam)
mse(test_set$cumulative, pred)
plot(test_set$time, test_set$cumulative, type= "l")
points(test_set$time, pred, type = "l", col = "red")
# time^3
model_time_3 <- stan_glm(avg_cases ~ time + I(time^2) + I(time^3) + lag2, family = poisson,  data=training_set)
library(dplyr)
library(readr)
library(pracma)
library(rstanarm)
library(loo)
library(Metrics)
library(mgcv)
library(earth)
# time^3
model_time_3 <- stan_glm(avg_cases ~ time + I(time^2) + I(time^3) + lag2, family = poisson,  data=training_set)
loss_stan(model_time_3, test_set) #13000
loss_stan_lag(model_time_3, test_set) #54290
model_time_3_lag_1_2 <- stan_glm(avg_cases ~ time + I(time^2) + I(time^3) + lag2 + lag1, family = poisson,  data=training_set)
loss_stan(model_time_3, test_set) #13000
loss_stan_lag(model_time_3, test_set) #54290
summary(model_time_3_lag_1_2)
loss_stan(model_time_3_lag_1_2, test_set) #12003
loss_stan_lag(model_time_3_lag_1_2, test_set) #14671
# bayesian + updating lag
loss_stan_lag <- function(model, test){
df <- test
pred_model <- posterior_predict(model, newdata = df[1,])
pred_mean <- apply(pred_model, 2, mean)
pred_0025 <- apply(pred_model, 2, function(x) quantile(x, 0.025))
pred_0975 <- apply(pred_model, 2, function(x) quantile(x, 0.975))
ms <- mse(as.double(df[1,"avg_cases"]), pred_mean)
pred <- pred_mean
pred_low <- pred_0025
pred_high <- pred_0975
df[1, "avg_cases"] <- pred_mean
#If we are just predicting one day then we are done
if (dim(df)[1] == 1){
return(ms)
}
#Yes, I know having not one but two nested loops is bad in R
#But look, there will not be that many iterations, we are dealing
#With short predictions here
for (i in 2:dim(df)[1]){
df[i, "lag1"] <- df[i-1, "avg_cases"]
#Need to update each lag column
for (k in 2:i){
col <- paste("lag",k,sep="")
col_prev <- paste("lag",k-1, sep="")
df[i, col] <- df[i-1, col_prev]
}
pred_model <- posterior_predict(model, newdata = df[i,])
pred_mean <- apply(pred_model, 2, mean)
pred_0025 <- apply(pred_model, 2, function(x) quantile(x, 0.025))
pred_0975 <- apply(pred_model, 2, function(x) quantile(x, 0.975))
pred <- c(pred, pred_mean)
pred_low <- c(pred_low, pred_0025)
pred_high <- c(pred_high, pred_0975)
ms <- ms + mse(as.double(df[i,"avg_cases"]), pred_mean)
df[i, "avg_cases"] <- pred_mean
}
plot(test$time, test$avg_cases, type="l")
points(test$time, pred, type="l", col="red")
lines(test$time, pred_low, lty=2, col="red")
lines(test$time, pred_high, lty=2, col="red")
return(ms/length(pred))
}
model_time_3_no_lag <- stan_glm(avg_cases ~ time + I(time^2) + I(time^3), family = poisson,  data=training_set)
loss_stan(model_time_3_no_lag, test_set) #13000
# time^2
model_time_2_no_lag <- stan_glm( avg_cases ~ time + I(time^2), family = poisson,  data=training_set)
loss_stan(model_time_2_no_lag, test_set) #33000
model_time_2_lag2 <- stan_glm( avg_cases ~ time + I(time^2) + lag2, family = poisson,  data=training_set)
loss_stan(model_time_2_lag2, test_set) #33000
loss_stan_lag(model_time_2_lag2, test_set)
# lockdown with lag and updated predictions
model_time_lock <- stan_glm(avg_cases ~ time +  I(time^2) + lag2 + post_lockdown + lockdown, family = poisson,  data=training_set )
loss_stan(model_time_lock, test_set) #10900
loss_stan_lag(model_time_lock, test_set) #85013
model_time_lock_3_lag_2 <- stan_glm(avg_cases ~ time +  I(time^2) + I(time^3) + lag2 + post_lockdown + lockdown, family = poisson,  data=training_set )
loss_stan(model_time_lock_3_lag_2, test_set) #14075
loss_stan_lag(model_time_lock_3_lag_2, test_set) #27924
#boh boh
model_gam <- gam(avg_cases ~  s(lag2) + s(time), method="REML", family = poisson(), data = training_set)
loss(model_gam, test_set)
loss_lag(model_gam, test_set)
summary(model_gam)
#boh boh
model_gam <- gam(avg_cases ~  s(lag2) + s(time) + s(lockdown), method="REML", family = poisson(), data = training_set)
loss(model_gam, test_set)
loss_lag(model_gam, test_set)
summary(model_gam)
#boh boh
model_gam <- gam(avg_cases ~  s(time), method="REML", family = poisson(), data = training_set)
loss(model_gam, test_set)
loss_lag(model_gam, test_set)
#boh boh
model_gam <- gam(avg_cases ~  s(time) lag2, method="REML", family = poisson(), data = training_set)
#boh boh
model_gam <- gam(avg_cases ~  s(time) + lag2, method="REML", family = poisson(), data = training_set)
loss(model_gam, test_set)
loss_lag(model_gam, test_set)
loss(model_gam, test_set)
loss_lag(model_gam, test_set)
?gam
#boh boh
model_gam <- gam(avg_cases ~  s(time, bs="cr") + lag2, method="REML", family = poisson(), data = training_set)
loss(model_gam, test_set) #25846
loss_lag(model_gam, test_set) #95120: peggiora notevolmente, non capisco bene perché
#boh boh
model_gam <- gam(avg_cases ~  s(time, bs="cr") + s(lag2, bs="cr"), method="REML", family = poisson(), data = training_set)
loss(model_gam, test_set) #25846
loss_lag(model_gam, test_set) #95120: peggiora notevolmente, non capisco bene perché
#boh boh
model_gam <- gam(avg_cases ~  s(time) + s(lag2, bs="cr"), method="REML", family = poisson(), data = training_set)
loss(model_gam, test_set) #25846
loss_lag(model_gam, test_set) #95120: peggiora notevolmente, non capisco bene perché
#boh boh
model_gam <- gam(avg_cases ~  s(time) + s(lag2, bs="tp"), method="REML", family = poisson(), data = training_set)
loss(model_gam, test_set) #25846
loss_lag(model_gam, test_set) #95120: peggiora notevolmente, non capisco bene perché
#boh boh
model_gam <- gam(avg_cases ~  s(time) + lag2, method="REML", family = poisson(), data = training_set)
loss(model_gam, test_set) #25846
loss_lag(model_gam, test_set) #95120: peggiora notevolmente, non capisco bene perché
model_gam <- gam(avg_cases ~  s(time, bs="cc") + lag2, method="REML", family = poisson(), data = training_set)
loss(model_gam, test_set) #25846
loss_lag(model_gam, test_set) #95120: peggiora notevolmente, non capisco bene perché
model_gam <- gam(avg_cases ~  s(time, bs="cs") + lag2, method="REML", family = poisson(), data = training_set)
loss(model_gam, test_set) #25846
loss_lag(model_gam, test_set) #95120: peggiora notevolmente, non capisco bene perché
model_gam <- gam(avg_cases ~  s(time, bs="cr") + lag2, method="REML", family = poisson(), data = training_set)
loss(model_gam, test_set) #25846
loss_lag(model_gam, test_set) #95120: peggiora notevolmente, non capisco bene perché
model_gam <- gam(avg_cases ~  s(time, bs="gp") + lag2, method="REML", family = poisson(), data = training_set)
loss(model_gam, test_set) #25846
loss_lag(model_gam, test_set) #95120: peggiora notevolmente, non capisco bene perché
loss(model_gam, test_set) #25846
#boh boh
model_gam <- gam(avg_cases ~  te(time) + lag2, method="REML", family = poisson(), data = training_set)
loss(model_gam, test_set) #25846
loss_lag(model_gam, test_set) #95120: peggiora notevolmente, non capisco bene perché
s
#boh boh
model_gam <- gam(avg_cases ~  s(time) + lag2, method="REML", family = poisson(), data = training_set)
loss(model_gam, test_set) #25846
loss_lag(model_gam, test_set) #95120: peggiora notevolmente, non capisco bene perché
##### MARS
training_set_3 <- training_set[3:dim(training_set)[1],]
mars <- earth(avg_cases ~ time + lag2, data = training_set_3, nk=5)
pred <- predict(mars, newdata = test_set, type = "response")
plot(data_daily$time[180:200], data_daily$avg_cases[180:200], type= "l")
points(test_set$time, pred, type = "l", col = "red")
mse(test_set$avg_cases, pred) #54347
loss_lag(mars, test_set)
plot(data_daily$time[180:200], data_daily$avg_cases[180:200], type= "l")
points(test_set$time, pred, type = "l", col = "red")
?earth
mars <- earth(avg_cases ~ time + lag2, data = training_set_3)
pred <- predict(mars, newdata = test_set, type = "response")
plot(data_daily$time[180:200], data_daily$avg_cases[180:200], type= "l")
points(test_set$time, pred, type = "l", col = "red")
mse(test_set$avg_cases, pred) #54347
loss_lag(mars, test_set)
mars <- earth(avg_cases ~ time + lag2, data = training_set_3, glm=list(family= poisson))
pred <- predict(mars, newdata = test_set, type = "response")
plot(data_daily$time[180:200], data_daily$avg_cases[180:200], type= "l")
points(test_set$time, pred, type = "l", col = "red")
mse(test_set$avg_cases, pred) #54347
mars <- earth(avg_cases ~ time + lag2, data = training_set_3)
pred <- predict(mars, newdata = test_set, type = "response")
plot(data_daily$time[180:200], data_daily$avg_cases[180:200], type= "l")
points(test_set$time, pred, type = "l", col = "red")
mse(test_set$avg_cases, pred) #54347
loss_lag(mars, test_set)
